use jsonrpsee::proc_macros::rpc;
use jsonrpsee::types::ErrorObjectOwned;
use serde_json::{Value, Map};
use std::collections::HashMap;
use super::types::Status; // Import Status from the new types module

// Define Result type alias for convenience in RPC methods
pub type RpcResult<T> = Result<T, ErrorObjectOwned>; // Make public

/// RPC methods for discovery.
#[rpc(server, client, namespace = "rpc")]
pub trait ZinitRpcApi {
    /// Returns the OpenRPC specification as a JSON Value.
    #[method(name = "discover")]
    async fn discover(&self) -> RpcResult<Value>;
}

/// RPC methods for service management.
#[rpc(server, client, namespace = "service")]
pub trait ZinitServiceApi {
    /// List all monitored services and their current state.
    /// Returns a map where keys are service names and values are state strings.
    #[method(name = "list")]
    async fn list(&self) -> RpcResult<HashMap<String, String>>;

    /// Get the detailed status of a specific service.
    #[method(name = "status")]
    async fn status(&self, name: String) -> RpcResult<Status>;

    /// Start a specific service.
    #[method(name = "start")]
    async fn start(&self, name: String) -> RpcResult<()>;

    /// Stop a specific service.
    #[method(name = "stop")]
    async fn stop(&self, name: String) -> RpcResult<()>;

    /// Load and monitor a new service from its configuration file (e.g., "service_name.yaml").
    #[method(name = "monitor")]
    async fn monitor(&self, name: String) -> RpcResult<()>;

    /// Stop monitoring a service and remove it from management.
    #[method(name = "forget")]
    async fn forget(&self, name: String) -> RpcResult<()>;

    /// Send a signal (e.g., "SIGTERM", "SIGKILL") to a specific service process.
    #[method(name = "kill")]
    async fn kill(&self, name: String, signal: String) -> RpcResult<()>;

    /// Create a new service configuration file (e.g., "service_name.yaml")
    /// with the provided content (JSON map representing YAML structure).
    /// Returns a success message string.
    #[method(name = "create")]
    async fn create(&self, name: String, content: Map<String, Value>) -> RpcResult<String>;

    /// Delete a service configuration file.
    /// Returns a success message string.
    #[method(name = "delete")]
    async fn delete(&self, name: String) -> RpcResult<String>;

    /// Get the content of a service configuration file as a JSON Value.
    #[method(name = "get")]
    async fn get(&self, name: String) -> RpcResult<Value>;
}

/// RPC methods for system-level operations.
#[rpc(server, client, namespace = "system")]
pub trait ZinitSystemApi {
    /// Initiate system shutdown process.
    #[method(name = "shutdown")]
    async fn shutdown(&self) -> RpcResult<()>;

    /// Initiate system reboot process.
    #[method(name = "reboot")]
    async fn reboot(&self) -> RpcResult<()>;
}

/// RPC subscription methods for streaming data.
#[rpc(server, client, namespace = "stream")]
pub trait ZinitLoggingApi {
    /// Subscribe to log messages generated by zinit and monitored services.
    /// An optional filter can be provided to only receive logs containing the filter string.
    /// The subscription returns a stream of log lines (String).
    /// The unsubscribe method name must be explicitly provided.
    #[subscription(name = "log", item = String, unsubscribe = "log_unsubscribe")]
    async fn log_subscribe(&self, filter: Option<String>);
}